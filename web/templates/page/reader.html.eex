<!DOCTYPE HTML>
<html>
<head>
  <meta charset="UTF-8">
  <title>Reader</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="<%= static_path(@conn, "/css/reader.css") %>">
</head>
<body>
  <script src="<%= static_path(@conn, "/js/reader.js") %>"></script>
  <script>
  var Reader = Elm.fullscreen(Elm.Reader.Reader, { location : window.location.href, chapterRendered : [0, []], headingUpdate : [] });

  var bookWidth = 530;
  var bookHeight = 600;

  var collidesWithBook = function(item) {
    var storyTextFrame = document.getElementById("book-text-frame");
    if(storyTextFrame == null) return false;
    var storyTextArea = storyTextFrame.contentWindow.document.getElementById("text-container");
    if(storyTextArea == null) return false;
      var bookRect = storyTextArea.getBoundingClientRect();
      var itemRect = item.getBoundingClientRect();

      return !(bookRect.right <= itemRect.left || bookRect.left >= itemRect.right);
  };

  var getHeadingsOnPage = function() {
    var storyTextFrame = document.getElementById("book-text-frame");
    if(storyTextFrame == null) return [];
    var storyTextArea = storyTextFrame.contentWindow.document.getElementById("text-container");
    if(storyTextArea == null) return [];
    var headings = storyTextArea.querySelectorAll("h1,h2,h3,h4,h5,h6");
    return Array.prototype.filter.call(headings, collidesWithBook)
      .map(function(h) { return h.id; })
      .filter(function(hId) { return hId != null });
  }

  function Watcher(getValue, callback) {
    this.interval = null;
    this.value = null;
    this.getValue = (typeof getValue === "function") ? getValue : function() {};
    this.callback = (typeof callback === "function") ? callback : function() {};
    
    this.start();
  }

  Watcher.prototype.start = function() {
    if(this.interval !== null) return;

    this.value = this.getValue();

    this.interval = setInterval(function() {
      if(this.getValue() !== this.value) {
        this.value = this.getValue();
        this.callback(this.value);
      }
    }.bind(this), 500);
  }

  Watcher.prototype.stop = function() {
    clearInterval(this.interval);
    this.interval = null;
  }



  Reader.ports.currentPage.subscribe(function(pageNum) {
    var storyTextFrame = document.getElementById("book-text-frame");
    if(storyTextFrame == null) return;
    var storyTextArea = storyTextFrame.contentWindow.document.getElementById("text-container");
    if(storyTextArea != null) {
      storyTextArea.scrollLeft = bookWidth * pageNum; //TODO: replace bookWidth with dynamic width of storyTextArea
      Reader.ports.headingUpdate.send(getHeadingsOnPage());
    }
  });

  Reader.ports.currentChapter.subscribe(function(chapter) {
    var storyTextFrame = document.getElementById("book-text-frame");
    if(storyTextFrame == null) return;
    storyTextFrame.contentWindow.document.open('text/htmlreplace');
    storyTextFrame.contentWindow.document.write(chapter);
    storyTextFrame.contentWindow.document.close();

    var storyTextArea = storyTextFrame.contentWindow.document.getElementById("text-container");
    if(storyTextArea == null) return;

    setTimeout(function() {
      //TODO: bump headings at bottom of page to next page
      var headings = Array.prototype.filter.call(storyTextArea.querySelectorAll("h1,h2,h3,h4,h5,h6"), function(h) {return true;});
      var bookRect = storyTextArea.getBoundingClientRect();
      for(heading of headings) {
        var headingRect = heading.getBoundingClientRect();
        if(headingRect.bottom >= bookRect.bottom - Math.max(bookRect.bottom * 0.04, headingRect.height)) { //TODO: (maybe) make sure hRect.height exists
          var placeholder = document.createElement("div");
          placeholder.style.height = headingRect.height + "px"; //TODO: (maybe) make sure hRect.height exists
          (heading.parentElement || heading.parentNode).insertBefore(placeholder,heading); //TODO: double check on Element vs Node stuff
        }
      }

      console.log("headings on page", getHeadingsOnPage());

      Reader.ports.chapterRendered.send(
        [ Math.round(storyTextArea.scrollWidth/bookWidth) //TODO: replace bookWidth with dynamic width of storyTextArea 
        , getHeadingsOnPage()
        ]
      ); 
    }, 1500);
  });
  </script>
</body>
</html>
